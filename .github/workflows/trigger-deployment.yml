name: Trigger Deployment

on:
  push:
    branches: [dev, staging, main]
  pull_request:
    branches: [dev, staging, main]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed services
      id: changes
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
        elif [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
          BASE_SHA="${{ github.event.before }}"
        else
          # First push or force push - compare with HEAD~1 or use all files
          BASE_SHA="HEAD~1"
        fi
        
        # Ensure we have the base commit
        if ! git cat-file -e "$BASE_SHA" 2>/dev/null; then
          echo "Base SHA not found, using HEAD~1"
          BASE_SHA="HEAD~1"
        fi
        
        CHANGED_FILES=$(git diff --name-only $BASE_SHA ${{ github.sha }} 2>/dev/null || git ls-files)
        SERVICES=()
        
        for service in services/user-service services/event-service services/notification-service services/api-gateway; do
          service_name=$(basename $service)
          if echo "$CHANGED_FILES" | grep -q "^$service/"; then
            SERVICES+=("\"$service_name\"")
          fi
        done
        
        # If shared libs changed, rebuild all services
        if echo "$CHANGED_FILES" | grep -qE "^shared/(common-lib|security-lib|messaging-lib)/"; then
          SERVICES=("\"user-service\"" "\"event-service\"" "\"notification-service\"" "\"api-gateway\"")
        fi
        
        # If workflow files changed, trigger all services for testing
        if echo "$CHANGED_FILES" | grep -q "^\.github/workflows/"; then
          SERVICES=("\"user-service\"" "\"event-service\"" "\"notification-service\"" "\"api-gateway\"")
        fi
        
        SERVICES_JSON="[$(IFS=,; echo "${SERVICES[*]}")]"
        echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
        echo "Debug: Changed files: $CHANGED_FILES"
        echo "Debug: Services found: $SERVICES_JSON"

    - name: Determine environment
      id: env
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

  trigger-deployment:
    needs: detect-changes
    if: always() && (needs.detect-changes.outputs.services != '[]' && needs.detect-changes.outputs.services != '')
    runs-on: ubuntu-latest
    steps:
    - name: Debug outputs
      run: |
        echo "Services: ${{ needs.detect-changes.outputs.services }}"
        echo "Environment: ${{ needs.detect-changes.outputs.environment }}"
        
    - name: Trigger DevOps Pipeline
      run: |
        echo "Triggering deployment for services: ${{ needs.detect-changes.outputs.services }}"
        echo "Environment: ${{ needs.detect-changes.outputs.environment }}"
        
        # Debug what we're about to call
        DEVOPS_URL="https://api.github.com/repos/${{ secrets.DEVOPS_REPO_OWNER }}/gep-devops/dispatches"
        TOKEN="${{ secrets.DEVOPS_REPO_TOKEN }}"
        echo "🔗 Target URL: $DEVOPS_URL"
        echo "🔑 Token set: $([ -n "$TOKEN" ] && echo "Yes (${#TOKEN} chars)" || echo "No")"
        
        # Check if required secrets are set
        if [ -z "${{ secrets.DEVOPS_REPO_TOKEN }}" ] || [ -z "${{ secrets.DEVOPS_REPO_OWNER }}" ]; then
          echo "⚠️ DEVOPS_REPO_TOKEN or DEVOPS_REPO_OWNER secrets not set"
          echo "📋 Payload that would be sent to: $DEVOPS_URL"
          echo '{
            "event_type": "backend-deployment",
            "client_payload": {
              "repository": "${{ github.repository }}",
              "sha": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "environment": "${{ needs.detect-changes.outputs.environment }}",
              "services": ${{ needs.detect-changes.outputs.services }},
              "actor": "${{ github.actor }}"
            }
          }'
          echo "✅ Workflow validation successful - would trigger DevOps pipeline"
          exit 0
        fi
        
        # Test if the repository exists first
        echo "🔍 Testing repository access..."
        repo_check=$(curl -s -w "\n%{http_code}" \
          -H "Authorization: token ${{ secrets.DEVOPS_REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ secrets.DEVOPS_REPO_OWNER }}/gep-devops)
        
        repo_http_code=$(echo "$repo_check" | tail -n1)
        if [ "$repo_http_code" -ne 200 ]; then
          echo "❌ Repository check failed. HTTP code: $repo_http_code"
          echo "Repository: ${{ secrets.DEVOPS_REPO_OWNER }}/gep-devops"
          echo "Response: $(echo "$repo_check" | head -n -1)"
          echo "💡 Possible issues: 1) Repository doesn't exist 2) Token lacks access 3) Wrong owner/repo name"
          exit 1
        fi
        
        echo "✅ Repository access confirmed"
        
        response=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: token ${{ secrets.DEVOPS_REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "$DEVOPS_URL" \
          -d '{
            "event_type": "backend-deployment",
            "client_payload": {
              "repository": "${{ github.repository }}",
              "sha": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "environment": "${{ needs.detect-changes.outputs.environment }}",
              "services": ${{ needs.detect-changes.outputs.services }},
              "actor": "${{ github.actor }}"
            }
          }')
        
        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n -1)
        
        if [ "$http_code" -eq 204 ]; then
          echo "✅ Successfully triggered DevOps pipeline"
        else
          echo "❌ Failed to trigger pipeline. HTTP code: $http_code"
          echo "Response: $body"
          echo "💡 For repository_dispatch, token needs 'repo' or 'public_repo' scope"
          exit 1
        fi

    - name: Get developer Slack user
      id: developer
      run: |
        echo "slack_user=${{ github.actor }}" >> $GITHUB_OUTPUT

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        username: 'GitHub Actions'
        text: |
          🚀 Deployment triggered by ${{ steps.developer.outputs.slack_user }}
          Branch: `${{ github.ref_name }}`
          Environment: `${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}`
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}